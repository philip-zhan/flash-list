import java.nio.file.Paths

def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
    apply plugin: 'com.facebook.react'
}

static def findNodeModules(baseDir) {
    def basePath = baseDir.toPath().normalize()
    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
        def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
        if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
            return nodeModulesPath.toString()
        }
        basePath = basePath.getParent()
    }
    throw new GradleException("react-native-worklets-core: Failed to find node_modules/ path!")
}

def JS_RUNTIME = {
    // Override JS runtime with environment variable
    if (System.getenv("JS_RUNTIME")) {
        return System.getenv("JS_RUNTIME")
    }

    // Check if Hermes is enabled in app setup
    def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }
    if (appProject?.hermesEnabled?.toBoolean()) {
        return "hermes"
    }

    // Use JavaScriptCore (JSC) by default
    return "jsc"
}.call()

def nodeModules = findNodeModules(projectDir)

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

task prepareHeaders(type: Copy) {
    from fileTree('../cpp').filter { it.isFile() }
    into "${project.buildDir}/headers/rnworklets/react-native-worklets-core/"
    includeEmptyDirs = false
}

task deleteCmakeCache() {
    doFirst {
        delete "${projectDir}/.cxx"
    }
}

def _ext = rootProject.ext

def _reactNativeVersion = _ext.has('reactNative') ? _ext.reactNative : '+'
def _compileSdkVersion = _ext.has('compileSdkVersion') ? _ext.compileSdkVersion : 30
def _buildToolsVersion = _ext.has('buildToolsVersion') ? _ext.buildToolsVersion : '30.0.2'
def _minSdkVersion = _ext.has('minSdkVersion') ? _ext.minSdkVersion : 21
def _targetSdkVersion = _ext.has('targetSdkVersion') ? _ext.targetSdkVersion : 30
def _junitVersion = _ext.has('junitVersion') ? _ext.junitVersion : '4.13.2'
def _mockitoVersion = _ext.has('mockitoVersion') ? _ext.mockitoVersion : '3.2.0'
def _androidTestRunnerVersion = _ext.has('androidTestRunnerVersion') ? _ext.androidTestRunnerVersion : '1.1.0'

buildscript {
    // buildscript is evaluated before any other task is executed, so this must be defined here
    ext._kotlinVersion = rootProject.ext.has("kotlinVersion") ?  rootProject.ext.get('kotlinVersion') : '1.8.10'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${_kotlinVersion}")
    }
}

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    // Conditional for compatibility with AGP <4.2.
    if (project.android.hasProperty("namespace")) {
        namespace = "com.shopify.reactnative.flash_list"
    }

    buildFeatures {
        prefab true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        if (!isNewArchitectureEnabled()) {
            main.java.srcDirs += ['src/paper/java']
        }
    }

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared",
                        "-DANDROID_TOOLCHAIN=clang",
                        "-DREACT_NATIVE_DIR=${nodeModules}/react-native",
                        "-DJS_RUNTIME=${JS_RUNTIME}"
                abiFilters (*reactNativeArchitectures())
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
      unitTests.returnDefaultValues = true
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
                    if (JS_RUNTIME == "hermes") {
                        arguments "-DHERMES_ENABLE_DEBUGGER=1"
                    } else {
                        arguments "-DHERMES_ENABLE_DEBUGGER=0"
                    }
                }
            }
        }
        release {
            externalNativeBuild {
                cmake {
                    arguments "-DHERMES_ENABLE_DEBUGGER=0"
                }
            }
        }
    }

    packagingOptions {
        excludes = [
                "META-INF",
                "META-INF/**",
                "**/libc++_shared.so",
                "**/libfbjni.so",
                "**/libjsi.so",
                "**/libfolly_json.so",
                "**/libfolly_runtime.so",
                "**/libglog.so",
                "**/libhermes.so",
                "**/libhermes-executor-debug.so",
                "**/libhermes_executor.so",
                "**/libreactnativejni.so",
                "**/libturbomodulejsijni.so",
                "**/libreact_nativemodule_core.so",
                "**/libjscexecutor.so",
        ]
    }
}

dependencies {
    implementation "com.facebook.react:react-native:${_reactNativeVersion}"
    implementation "com.facebook.react:react-android"
    if (JS_RUNTIME == "hermes") {
        implementation "com.facebook.react:hermes-android"
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${_kotlinVersion}"
    testImplementation "junit:junit:${_junitVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${_mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${_mockitoVersion}"
    testImplementation 'com.google.code.gson:gson:2.8.9'
    androidTestImplementation("androidx.test:runner:${_androidTestRunnerVersion}")
    androidTestImplementation("androidx.test:rules:${_androidTestRunnerVersion}")
}

tasks.configureEach { task ->
    // C++ clean
    if (task.name.contains("clean")) {
        task.dependsOn(deleteCmakeCache)
    }
}
